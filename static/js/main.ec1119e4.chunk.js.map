{"version":3,"sources":["utils/utils.js","components/message.js","components/dialogBox.js","components/header.js","components/input.js","containers/Thread.js","serviceWorker.js","index.js"],"names":["RealTime","date","Date","hours","getHours","mins","getMinutes","RandomNumber","min","max","isInt","num","Math","random","round","value","precision","multiplier","pow","useStyles","makeStyles","theme","root","flexGrow","transformOrigin","paper","padding","spacing","textAlign","color","palette","text","secondary","borderRadius","me","backgroundColor","lblue","marginBottom","messageBox","breakpoints","down","maxWidth","up","Message","props","classes","from","paperClases","classNames","Fragment","Grow","in","className","Box","display","flexDirection","p","Paper","Typography","variant","message","width","margin","height","DialogBox","React","useState","status","setStatus","textAreaRef","useRef","Dialog","open","secOpen","onClose","action","aria-labelledby","aria-describedby","fullWidth","DialogTitle","id","onSubmit","e","console","log","preventDefault","form","target","data","FormData","xhr","XMLHttpRequest","method","setRequestHeader","onreadystatechange","readyState","DONE","reset","send","DialogContent","TextField","label","name","rowsMax","gutterBottom","gutterTop","Slider","step","defaultValue","marks","getAriaValueText","valueLabelDisplay","inputProps","ref","textCopy","multiline","required","DialogActions","Button","onClick","type","autoFocus","DialogContentText","title","Header","contact","setSecOpen","setOpen","handleOpen","btn","AppBar","Toolbar","IconButton","edge","Divider","orientation","flexItem","light","marginTop","top","bottom","marginBlockEnd","input","maxHeight","overflow","border","msg","Input","setMessage","position","event","t","m","noValidate","autoComplete","Grid","container","alignItems","item","xs","FormControl","OutlinedInput","placeholder","onChange","val","prevState","responses","possibleWords","response","optional","person","Thread","messages","setMessages","messageQueue","setMessageQueue","setTextCopy","addMessage","useEffect","window","scrollTo","document","body","scrollHeight","behavior","length","res","i","tmpI","iter","filter","w","toLowerCase","indexOf","Number","isInteger","splice","pop","checkResponse","q","timer","setTimeout","shift","push","JSON","stringify","allMessages","map","key","style","Boolean","location","hostname","match","ReactDOM","render","CssBaseline","querySelector","navigator","serviceWorker","ready","then","registration","unregister","catch","error"],"mappings":"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","file":"static/js/main.ec1119e4.chunk.js","sourcesContent":["export function RealTime() {\r\n  let date = new Date();\r\n  let hours = date.getHours();\r\n  let mins = date.getMinutes();\r\n\r\n  return `${hours % 12 || 12}:${mins} ${hours > 11 ? \"PM\" : \"AM\"}`;\r\n}\r\n\r\nexport function RandomNumber(min, max, isInt) {\r\n  let num = Math.random() * (max - min + 1) + min;\r\n  if (isInt) num = round(num);\r\n  else num = round(num, 2);\r\n  return num;\r\n}\r\n\r\nfunction round(value, precision) {\r\n  var multiplier = Math.pow(10, precision || 0);\r\n  return Math.round(value * multiplier) / multiplier;\r\n}\r\n","import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport Paper from \"@material-ui/core/Paper\";\r\nimport lblue from \"@material-ui/core/colors/lightBlue\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport Box from \"@material-ui/core/Box\";\r\nimport Grow from \"@material-ui/core/Grow\";\r\nimport { RandomNumber } from \"../utils/utils\";\r\nimport classNames from 'classnames'\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    flexGrow: 1,\r\n    transformOrigin: \"right bottom\"\r\n  },\r\n  paper: {\r\n    padding: theme.spacing(2),\r\n    textAlign: \"left\",\r\n    color: theme.palette.text.secondary,\r\n    borderRadius: \"10px\"\r\n  },\r\n  me: {\r\n    backgroundColor: lblue[600],\r\n    color: \"rgba(255,255,255,0.9)\"\r\n  },\r\n  date: {\r\n    marginBottom: \".5em\"\r\n  },\r\n  messageBox: {\r\n    [theme.breakpoints.down(\"sm\")]: {\r\n      maxWidth: \"90%\"\r\n    },\r\n    [theme.breakpoints.up(\"md\")]: {\r\n      maxWidth: \"70%\"\r\n    }\r\n  }\r\n}));\r\n\r\nfunction Message(props) {\r\n  const classes = useStyles();\r\n  const from = props.from;\r\n  let time = RandomNumber(3, 4) * 1000;\r\n\r\n  const paperClases = classNames({\r\n    [classes.paper]: true,\r\n    [classes.me]: from === \"Me\"\r\n  });\r\n\r\n  return (\r\n    <React.Fragment>\r\n      <Grow in className={classes.root}>\r\n        <Box\r\n          display=\"flex\"\r\n          flexDirection={from === \"Me\" ? \"row-reverse\" : \"row\"}\r\n          p={1}\r\n        >\r\n          <Box className={classes.messageBox}>\r\n            <Paper className={paperClases}>\r\n              <div className={classes.date}>\r\n                <Typography variant=\"caption\" className={classes.date}>\r\n                  {props.date}\r\n                </Typography>\r\n              </div>\r\n              {props.message}\r\n            </Paper>\r\n          </Box>\r\n        </Box>\r\n      </Grow>\r\n    </React.Fragment>\r\n  );\r\n}\r\n\r\nexport default Message;\r\n","import React from \"react\"\r\nimport Dialog from \"@material-ui/core/Dialog\"\r\nimport DialogActions from '@material-ui/core/DialogActions';\r\nimport DialogContent from '@material-ui/core/DialogContent';\r\nimport DialogContentText from '@material-ui/core/DialogContentText';\r\nimport DialogTitle from '@material-ui/core/DialogTitle';\r\nimport Button from \"@material-ui/core/Button\"\r\nimport TextField from \"@material-ui/core/TextField\";\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport { IoMdInformationCircleOutline, IoMdArrowRoundBack } from \"react-icons/io\";\r\nimport { Slider } from \"@material-ui/core\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\n\r\nconst useStyles = makeStyles((theme) => ({\r\n  root: {\r\n    width: 250,\r\n  },\r\n  margin: {\r\n    height: theme.spacing(3),\r\n  },\r\n}));\r\n\r\nfunction DialogBox(props) {\r\n  const [status, setStatus] = React.useState('');\r\n  const textAreaRef = React.useRef(null);\r\n  const classes = useStyles();\r\n\r\n  function handleSubmit (e) {\r\n    console.log(\"submitting\")\r\n    e.preventDefault();\r\n    const form = e.target;\r\n    const data = new FormData(form);\r\n    const xhr = new XMLHttpRequest();\r\n    xhr.open(form.method, form.action);\r\n    xhr.setRequestHeader(\"Accept\", \"application/json\");\r\n    xhr.onreadystatechange = () => {\r\n      if (xhr.readyState !== XMLHttpRequest.DONE) return;\r\n      if (xhr.status === 200) {\r\n        form.reset();\r\n        setStatus(\"SUCCESS\")\r\n      } else {\r\n        setStatus(\"ERROR\")\r\n      }\r\n    };\r\n    xhr.send(data);\r\n  }\r\n\r\n  function valuetext(value) {\r\n    return `${value} stars`;\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <Dialog\r\n        open={props.secOpen}\r\n        onClose={() => {props.action(\"convo\")}}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n        fullWidth\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Thanks so much!\"}</DialogTitle>\r\n        <form\r\n          onSubmit={handleSubmit}\r\n          action=\"https://formspree.io/xeqrprzy\"\r\n          method=\"POST\"\r\n        >\r\n          <DialogContent>\r\n            <TextField\r\n              fullWidth\r\n              label=\"Name\"\r\n              name=\"name\"\r\n              variant=\"outlined\"\r\n            />\r\n            <div className={classes.margin} />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Email\"\r\n              name=\"email\"\r\n              variant=\"outlined\"\r\n            />\r\n            <div className={classes.margin} />\r\n            <TextField\r\n              fullWidth\r\n              label=\"Any comments for me?\"\r\n              name=\"comments\"\r\n              variant=\"outlined\"\r\n              rowsMax=\"3\"\r\n            />\r\n            <div className={classes.margin} />\r\n            <Typography id=\"non-linear-slider\" gutterBottom gutterTop>\r\n              Rate the Conversation\r\n            </Typography>\r\n            <Slider\r\n              fullWidth\r\n              label=\"Rating\"\r\n              name=\"rating\"\r\n              step={1}\r\n              min={1}\r\n              max={5}\r\n              defaultValue={3}\r\n              marks\r\n              getAriaValueText={valuetext}\r\n              valueLabelDisplay=\"auto\"\r\n            />\r\n            <div className={classes.margin} />\r\n            <TextField \r\n              inputProps={ { ref: textAreaRef } }\r\n              value={props.textCopy}\r\n              multiline\r\n              fullWidth\r\n              required\r\n              variant=\"outlined\"\r\n              label=\"Full Conversation\"\r\n              name=\"conversation\"\r\n            />\r\n          </DialogContent>\r\n          <DialogActions>\r\n            <Button onClick={() => {props.action(\"convo\")}} color=\"secondary\">\r\n              Cancel\r\n            </Button>\r\n            <Button value=\"Submit\" type=\"submit\" color=\"primary\" autoFocus>\r\n              { status === \"SUCCESS\" ? \"Thanks!\" : \"Send\" }\r\n              { status === \"ERROR\" && \"Ooops! There was an error.\" }\r\n            </Button>\r\n            \r\n          </DialogActions>\r\n        </form>\r\n      </Dialog>\r\n      <Dialog\r\n        open={props.open}\r\n        onClose={() => {props.action()}}\r\n        aria-labelledby=\"alert-dialog-title\"\r\n        aria-describedby=\"alert-dialog-description\"\r\n      >\r\n        <DialogTitle id=\"alert-dialog-title\">{\"Before You Begin!\"}</DialogTitle>\r\n        <DialogContent>\r\n          <DialogContentText id=\"alert-dialog-description\">\r\n            You get a text from someone that says:\r\n            <br/><br/>\r\n            <b>\"Hey, I'm not sure where Tony is, but you can try \r\n            this number, they might know where he's been.\r\n            <br/>\r\n            (907) 555-4323\"</b>\r\n            <br/><br/>\r\n            Your goal, text this number to find out\r\n            where Tony was last seen.\r\n            <br/><br/>\r\n            When you finish with the story, press \r\n            the <IoMdArrowRoundBack /> button \r\n            on the top right of the window to send me your conversation! \r\n            It will help me with further development.\r\n            <br/><br/>\r\n            Press the <IoMdInformationCircleOutline /> at any point\r\n            to come back to these directions. Thanks! Enjoy!\r\n          </DialogContentText>\r\n        </DialogContent>\r\n        <DialogActions>\r\n          <Button onClick={() => {props.action()}} color=\"primary\" autoFocus>\r\n            Got It\r\n          </Button>\r\n        </DialogActions>\r\n      </Dialog>\r\n    </div>\r\n  )\r\n\r\n}\r\n\r\nexport default DialogBox;\r\n","import React from \"react\";\r\nimport AppBar from \"@material-ui/core/AppBar\";\r\nimport Toolbar from \"@material-ui/core/Toolbar\";\r\nimport Typography from \"@material-ui/core/Typography\";\r\nimport {\r\n  IoMdArrowRoundBack,\r\n  IoMdInformationCircleOutline\r\n} from \"react-icons/io\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport Divider from \"@material-ui/core/Divider\";\r\nimport { makeStyles } from \"@material-ui/core\";\r\nimport DialogBox from \"./dialogBox\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    \"& hr\": {\r\n      margin: theme.spacing(0, 2, 0, 0)\r\n    }\r\n  },\r\n  title: {\r\n    flexGrow: 1\r\n  }\r\n}));\r\n\r\nfunction Header({ contact, textCopy }) {\r\n  const classes = useStyles();\r\n  const [secOpen, setSecOpen] = React.useState(false)\r\n  const [open, setOpen] = React.useState(true);\r\n\r\n  function handleOpen(btn) {\r\n    if(btn===\"convo\")\r\n      setSecOpen(true)\r\n    else\r\n      setOpen(true)\r\n  }\r\n\r\n  function handleClose (btn) {\r\n    if(btn===\"convo\")\r\n      setSecOpen(false)\r\n    else\r\n      setOpen(false)\r\n  };\r\n\r\n  return (\r\n    <>\r\n    <AppBar className={classes.root}>\r\n      <Toolbar>\r\n        <IconButton onClick={() => {handleOpen(\"convo\")}} edge=\"start\" color=\"inherit\">\r\n          <IoMdArrowRoundBack />\r\n        </IconButton>\r\n        <Divider orientation=\"vertical\" flexItem light />\r\n        <Typography variant=\"h6\" className={classes.title}>\r\n          {contact}\r\n        </Typography>\r\n        <IconButton onClick={() => {handleOpen()}} edge=\"end\" color=\"inherit\">\r\n          <IoMdInformationCircleOutline />\r\n        </IconButton>\r\n      </Toolbar>\r\n    </AppBar>\r\n    <DialogBox secOpen={secOpen} open={open} textCopy={textCopy} action={handleClose} />\r\n    </>\r\n  );\r\n}\r\n\r\nexport default Header;\r\n","import React from \"react\";\r\nimport makeStyles from \"@material-ui/core/styles/makeStyles\";\r\nimport OutlinedInput from \"@material-ui/core/OutlinedInput\";\r\nimport FormControl from \"@material-ui/core/FormControl\";\r\nimport Grid from \"@material-ui/core/Grid\";\r\nimport IconButton from \"@material-ui/core/IconButton\";\r\nimport { IoMdSend } from \"react-icons/io\";\r\nimport { AppBar, Toolbar } from \"@material-ui/core\";\r\nimport { RealTime } from \"../utils/utils\";\r\n\r\nconst useStyles = makeStyles(theme => ({\r\n  root: {\r\n    width: \"100%\",\r\n    marginTop: \"1em\",\r\n    top: \"auto\",\r\n    bottom: 0,\r\n    backgroundColor: \"#fff\"\r\n  },\r\n  form: {\r\n    width: \"100%\",\r\n    padding: \"10px 0\",\r\n    marginBlockEnd: \"0\"\r\n  },\r\n  input: {\r\n    maxHeight: \"150px\",\r\n    overflow: \"auto !important\"\r\n  },\r\n  border: {\r\n    borderRadius: \"25px\"\r\n  }\r\n}));\r\n\r\nconst msg = {\r\n  from: \"\",\r\n  date: \"\",\r\n  message: \"\"\r\n};\r\n\r\nfunction Input(props) {\r\n  const classes = useStyles();\r\n  const [message, setMessage] = React.useState(msg);\r\n\r\n  function handleSubmit(event) {\r\n    event.preventDefault();\r\n    let t = RealTime();\r\n    let m = message;\r\n\r\n    m.date = t;\r\n    m.from = \"Me\";\r\n\r\n    props.action(m);\r\n\r\n    setMessage(msg);\r\n  }\r\n\r\n  function handleChange(event) {\r\n    const val = event.target.value;\r\n    setMessage(prevState => {\r\n      return { ...prevState, message: val };\r\n    });\r\n  }\r\n\r\n  return (\r\n    <AppBar className={classes.root} position=\"fixed\">\r\n      <Toolbar>\r\n        <form\r\n          className={classes.form}\r\n          onSubmit={handleSubmit}\r\n          noValidate\r\n          autoComplete=\"off\"\r\n        >\r\n          <Grid container alignItems=\"center\" spacing={3}>\r\n            <Grid item xs>\r\n              <FormControl fullWidth variant=\"outlined\">\r\n                <OutlinedInput\r\n                  id=\"component-outlined\"\r\n                  placeholder=\"Your message...\"\r\n                  inputProps={{ className: classes.input }}\r\n                  onChange={handleChange}\r\n                  value={message.message}\r\n                  className={classes.border}\r\n                />\r\n              </FormControl>\r\n            </Grid>\r\n            <Grid item>\r\n              <IconButton\r\n                type=\"submit\"\r\n                name=\"Submit\"\r\n                color=\"primary\"\r\n                edge=\"end\"\r\n              >\r\n                <IoMdSend />\r\n              </IconButton>\r\n            </Grid>\r\n          </Grid>\r\n        </form>\r\n      </Toolbar>\r\n    </AppBar>\r\n  );\r\n}\r\n\r\nexport default Input;\r\n","import React from \"react\";\r\nimport Message from \"../components/message\";\r\nimport Header from \"../components/header.js\";\r\nimport Input from \"../components/input\";\r\nimport { RealTime, RandomNumber } from \"../utils/utils\";\r\nimport DialogBox from \"../components/dialogBox\";\r\n\r\nconst responses = [\r\n  {\r\n    possibleWords: [\"hey\", \"yo\", \"sup\", \"hello\"],\r\n    response: \"Whatya want!? I'm busy watchin my General Hospitals!\",\r\n    optional: true\r\n  },\r\n  {\r\n    possibleWords: [\"sorry\", \"apolog\", \"bad\"],\r\n    response: \"Oh boo hoo, get to the point!\",\r\n    optional: true\r\n  },\r\n  {\r\n    possibleWords: [\"where\", \"someone\", \"looking\", \"info\"],\r\n    response: \"Can yous be more specific? As I said, I'm very busy right nows!\",\r\n    optional: true\r\n  },\r\n  {\r\n    possibleWords: [\"tony\"],\r\n    response:\r\n      \"I don't know no one by dat name! And even if I did, i ain't no RAT.\",\r\n    optional: false\r\n  },\r\n  {\r\n    possibleWords: [\"\"],\r\n    response:\r\n      \"I'm just messin, I hate Tony, so I'll tell ya's. but first you gotta answer a question for me...\",\r\n    optional: false\r\n  },\r\n  {\r\n    possibleWords: [\"\"],\r\n    response: \"Now listen up... who would win in a fight, a taco or a grilled cheese sandwich?\",\r\n    optional: false\r\n  },\r\n  {\r\n    possibleWords: [\"\"],\r\n    response: \"Well, when you have an actual answer, I'll be here.\",\r\n    optional: true\r\n  },\r\n  {\r\n    possibleWords: [\"taco\", \"grilled cheese\"],\r\n    response: \"Ayyy, good answer! Tony was hangin out at that Frolics joint last I saws\",\r\n    optional: false\r\n  },\r\n  {\r\n    possibleWords: [\"where\", \"location\"],\r\n    response: \"On the corner of 10th and Sawyer\",\r\n    optional: true\r\n  },\r\n  {\r\n    possibleWords: [\"when\", \"time\"],\r\n    response: \"What do i look like, an encyclopedia? That's all i know, ok? \",\r\n    optional: true\r\n  },\r\n  {\r\n    possibleWords: [\"thank\", \"later\", \"bye\", \"ok\"],\r\n    response: \"Yeah whatever, now let me watch my stories in peace!\",\r\n    optional: false\r\n  }\r\n];\r\n\r\nconst person = {\r\n  name: \"\",\r\n  phone: \"(907) 555-4323\"\r\n};\r\n\r\nfunction Thread() {\r\n  const [messages, setMessages] = React.useState([]);\r\n  const [messageQueue, setMessageQueue] = React.useState([]);\r\n  const [textCopy, setTextCopy] = React.useState(\"\")\r\n  \r\n\r\n  React.useEffect(() => {\r\n    window.scrollTo({ top: document.body.scrollHeight, behavior: \"smooth\" });\r\n\r\n    if (messages.length > 0)\r\n      if (messages[messages.length - 1].from === \"Me\") {\r\n        let res = checkResponse(messages[messages.length - 1].message);\r\n        if (res) {\r\n          let msg = {\r\n            from: person.name || person.phone,\r\n            message: res.response,\r\n            date: RealTime()\r\n          };\r\n\r\n          let timer = setTimeout(() => {\r\n            let m = messageQueue.shift();\r\n            setMessageQueue(messageQueue);\r\n            addMessage(m.msg);\r\n          }, RandomNumber(3, 6) * 1000);\r\n\r\n          let q = { timer, msg };\r\n          messageQueue.push(q);\r\n        }\r\n      }\r\n  }, [messages, messageQueue]);\r\n\r\n  React.useEffect(() => {\r\n    if(messages.length)\r\n    setTextCopy(JSON.stringify(messages))\r\n  }, [messages])\r\n\r\n  function checkResponse(msg) {\r\n    let i, tmpI, res;\r\n    let iter = 0;\r\n    while (!res) {\r\n      if (\r\n        responses[iter]?.possibleWords.filter(\r\n          w => msg.toLowerCase().indexOf(w) > -1\r\n        ).length > 0\r\n      )\r\n        tmpI = iter;\r\n      if (responses[iter]?.optional) iter++;\r\n      else {\r\n        i = tmpI;\r\n        if (Number.isInteger(i)) res = responses.splice(0, i + 1).pop();\r\n        break;\r\n      }\r\n    }\r\n    return res;\r\n  }\r\n\r\n  function addMessage(msg) {\r\n    setMessages(prevState => [...prevState, msg]);\r\n  }\r\n\r\n  const allMessages = messages.map((msg, i) => (\r\n    <Message key={i} from={msg.from} date={msg.date} message={msg.message} />\r\n  ));\r\n\r\n  return (\r\n    <div>\r\n      <Header contact={person.name || person.phone} textCopy={textCopy} />\r\n      <div style={{ height: \"75px\" }}>&nbsp;</div>\r\n      {allMessages}\r\n      <div style={{ height: \"75px\" }}>&nbsp;</div>\r\n      <Input action={addMessage} />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default Thread;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport Thread from \"./containers/Thread\";\nimport \"./index.css\";\nimport * as serviceWorker from './serviceWorker';\nimport { CssBaseline } from \"@material-ui/core\";\n\nReactDOM.render(\n  <>\n    <CssBaseline />\n    <Thread />\n  </>,\n  document.querySelector(\"#root\")\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}